/*
Copyright 2020 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"	
	"github.com/kcp-dev/logicalcluster/v2"
	
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"
	
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	tektonv1alpha1 "github.com/tektoncd/pipeline/pkg/apis/resource/v1alpha1"
	tektonv1alpha1listers "github.com/tektoncd/pipeline/pkg/client/resource/listers/resource/v1alpha1"
	)

// PipelineResourceClusterLister can list PipelineResources across all workspaces, or scope down to a PipelineResourceLister for one workspace.
type PipelineResourceClusterLister interface {
	List(selector labels.Selector) (ret []*tektonv1alpha1.PipelineResource, err error)
Cluster(cluster logicalcluster.Name)tektonv1alpha1listers.PipelineResourceLister
}

type pipelineResourceClusterLister struct {
	indexer cache.Indexer
}

// NewPipelineResourceClusterLister returns a new PipelineResourceClusterLister.
func NewPipelineResourceClusterLister(indexer cache.Indexer) *pipelineResourceClusterLister {
	return &pipelineResourceClusterLister{indexer: indexer}
}

// List lists all PipelineResources in the indexer across all workspaces.
func (s *pipelineResourceClusterLister) List(selector labels.Selector) (ret []*tektonv1alpha1.PipelineResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tektonv1alpha1.PipelineResource))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get PipelineResources.
func (s *pipelineResourceClusterLister) Cluster(cluster logicalcluster.Name)tektonv1alpha1listers.PipelineResourceLister {
return &pipelineResourceLister{indexer: s.indexer, cluster: cluster}
}

// pipelineResourceLister implements the tektonv1alpha1listers.PipelineResourceLister interface.
type pipelineResourceLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all PipelineResources in the indexer for a workspace.
func (s *pipelineResourceLister) List(selector labels.Selector) (ret []*tektonv1alpha1.PipelineResource, err error) {
	selectAll := selector == nil || selector.Empty()

	list, err := s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tektonv1alpha1.PipelineResource)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// PipelineResources returns an object that can list and get PipelineResources in one namespace.
func (s *pipelineResourceLister) PipelineResources(namespace string) tektonv1alpha1listers.PipelineResourceNamespaceLister {
return &pipelineResourceNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// pipelineResourceNamespaceLister implements the tektonv1alpha1listers.PipelineResourceNamespaceLister interface.
type pipelineResourceNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all PipelineResources in the indexer for a given workspace and namespace.
func (s *pipelineResourceNamespaceLister) List(selector labels.Selector) (ret []*tektonv1alpha1.PipelineResource, err error) {
	selectAll := selector == nil || selector.Empty()

	var list []interface{}
	if s.namespace == metav1.NamespaceAll {
		list, err = s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	} else {
		list, err = s.indexer.ByIndex(kcpcache.ClusterAndNamespaceIndexName, kcpcache.ClusterAndNamespaceIndexKey(s.cluster, s.namespace))
	}
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tektonv1alpha1.PipelineResource)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the PipelineResource from the indexer for a given workspace, namespace and name.
func (s *pipelineResourceNamespaceLister) Get(name string) (*tektonv1alpha1.PipelineResource, error) {
	key := kcpcache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tektonv1alpha1.Resource("PipelineResource"), name)
	}
	return obj.(*tektonv1alpha1.PipelineResource), nil
}
