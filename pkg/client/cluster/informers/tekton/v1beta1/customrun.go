/*
Copyright 2020 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v2"

	tektonv1beta1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	tektonv1beta1listers "github.com/tektoncd/pipeline/pkg/client/cluster/listers/tekton/v1beta1"
	upstreamtektonv1beta1listers "github.com/tektoncd/pipeline/pkg/client/listers/pipeline/v1beta1"
	upstreamtektonv1beta1informers "github.com/tektoncd/pipeline/pkg/client/informers/externalversions/pipeline/v1beta1"
	clientset "github.com/tektoncd/pipeline/pkg/client/cluster/clientset"

	"github.com/tektoncd/pipeline/pkg/client/cluster/informers/internalinterfaces"
)

// CustomRunClusterInformer provides access to a shared informer and lister for
// CustomRuns.
type CustomRunClusterInformer interface {
	Cluster(logicalcluster.Name) upstreamtektonv1beta1informers.CustomRunInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() tektonv1beta1listers.CustomRunClusterLister
}

type customRunClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewCustomRunClusterInformer constructs a new informer for CustomRun type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewCustomRunClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredCustomRunClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredCustomRunClusterInformer constructs a new informer for CustomRun type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredCustomRunClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TektonV1beta1().CustomRuns().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TektonV1beta1().CustomRuns().Watch(context.TODO(), options)
			},
		},
		&tektonv1beta1.CustomRun{},
		resyncPeriod,
		indexers,
	)
}

func (f *customRunClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredCustomRunClusterInformer(client, resyncPeriod, cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,}, 
		f.tweakListOptions,
	)
}

func (f *customRunClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&tektonv1beta1.CustomRun{}, f.defaultInformer)
}

func (f *customRunClusterInformer) Lister() tektonv1beta1listers.CustomRunClusterLister {
	return tektonv1beta1listers.NewCustomRunClusterLister(f.Informer().GetIndexer())
}

func (f *customRunClusterInformer) Cluster(cluster logicalcluster.Name) upstreamtektonv1beta1informers.CustomRunInformer {
	return &customRunInformer{
		informer: f.Informer().Cluster(cluster),
		lister:   f.Lister().Cluster(cluster),
	}
}

type customRunInformer struct {
	informer cache.SharedIndexInformer
	lister upstreamtektonv1beta1listers.CustomRunLister
}

func (f *customRunInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *customRunInformer) Lister() upstreamtektonv1beta1listers.CustomRunLister {
	return f.lister
}
