/*
Copyright 2020 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"	
	"github.com/kcp-dev/logicalcluster/v2"
	
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"
	
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	tektonv1alpha1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1"
	tektonv1alpha1listers "github.com/tektoncd/pipeline/pkg/client/listers/pipeline/v1alpha1"
	)

// RunClusterLister can list Runs across all workspaces, or scope down to a RunLister for one workspace.
type RunClusterLister interface {
	List(selector labels.Selector) (ret []*tektonv1alpha1.Run, err error)
Cluster(cluster logicalcluster.Name)tektonv1alpha1listers.RunLister
}

type runClusterLister struct {
	indexer cache.Indexer
}

// NewRunClusterLister returns a new RunClusterLister.
func NewRunClusterLister(indexer cache.Indexer) *runClusterLister {
	return &runClusterLister{indexer: indexer}
}

// List lists all Runs in the indexer across all workspaces.
func (s *runClusterLister) List(selector labels.Selector) (ret []*tektonv1alpha1.Run, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tektonv1alpha1.Run))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Runs.
func (s *runClusterLister) Cluster(cluster logicalcluster.Name)tektonv1alpha1listers.RunLister {
return &runLister{indexer: s.indexer, cluster: cluster}
}

// runLister implements the tektonv1alpha1listers.RunLister interface.
type runLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all Runs in the indexer for a workspace.
func (s *runLister) List(selector labels.Selector) (ret []*tektonv1alpha1.Run, err error) {
	selectAll := selector == nil || selector.Empty()

	list, err := s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tektonv1alpha1.Run)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Runs returns an object that can list and get Runs in one namespace.
func (s *runLister) Runs(namespace string) tektonv1alpha1listers.RunNamespaceLister {
return &runNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// runNamespaceLister implements the tektonv1alpha1listers.RunNamespaceLister interface.
type runNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all Runs in the indexer for a given workspace and namespace.
func (s *runNamespaceLister) List(selector labels.Selector) (ret []*tektonv1alpha1.Run, err error) {
	selectAll := selector == nil || selector.Empty()

	var list []interface{}
	if s.namespace == metav1.NamespaceAll {
		list, err = s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	} else {
		list, err = s.indexer.ByIndex(kcpcache.ClusterAndNamespaceIndexName, kcpcache.ClusterAndNamespaceIndexKey(s.cluster, s.namespace))
	}
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tektonv1alpha1.Run)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the Run from the indexer for a given workspace, namespace and name.
func (s *runNamespaceLister) Get(name string) (*tektonv1alpha1.Run, error) {
	key := kcpcache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tektonv1alpha1.Resource("Run"), name)
	}
	return obj.(*tektonv1alpha1.Run), nil
}
