/*
Copyright 2020 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"	
	"github.com/kcp-dev/logicalcluster/v2"
	
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"
	
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	tektonv1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1"
	tektonv1listers "github.com/tektoncd/pipeline/pkg/client/listers/pipeline/v1"
	)

// PipelineClusterLister can list Pipelines across all workspaces, or scope down to a PipelineLister for one workspace.
type PipelineClusterLister interface {
	List(selector labels.Selector) (ret []*tektonv1.Pipeline, err error)
Cluster(cluster logicalcluster.Name)tektonv1listers.PipelineLister
}

type pipelineClusterLister struct {
	indexer cache.Indexer
}

// NewPipelineClusterLister returns a new PipelineClusterLister.
func NewPipelineClusterLister(indexer cache.Indexer) *pipelineClusterLister {
	return &pipelineClusterLister{indexer: indexer}
}

// List lists all Pipelines in the indexer across all workspaces.
func (s *pipelineClusterLister) List(selector labels.Selector) (ret []*tektonv1.Pipeline, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tektonv1.Pipeline))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Pipelines.
func (s *pipelineClusterLister) Cluster(cluster logicalcluster.Name)tektonv1listers.PipelineLister {
return &pipelineLister{indexer: s.indexer, cluster: cluster}
}

// pipelineLister implements the tektonv1listers.PipelineLister interface.
type pipelineLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all Pipelines in the indexer for a workspace.
func (s *pipelineLister) List(selector labels.Selector) (ret []*tektonv1.Pipeline, err error) {
	selectAll := selector == nil || selector.Empty()

	list, err := s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tektonv1.Pipeline)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Pipelines returns an object that can list and get Pipelines in one namespace.
func (s *pipelineLister) Pipelines(namespace string) tektonv1listers.PipelineNamespaceLister {
return &pipelineNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// pipelineNamespaceLister implements the tektonv1listers.PipelineNamespaceLister interface.
type pipelineNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all Pipelines in the indexer for a given workspace and namespace.
func (s *pipelineNamespaceLister) List(selector labels.Selector) (ret []*tektonv1.Pipeline, err error) {
	selectAll := selector == nil || selector.Empty()

	var list []interface{}
	if s.namespace == metav1.NamespaceAll {
		list, err = s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	} else {
		list, err = s.indexer.ByIndex(kcpcache.ClusterAndNamespaceIndexName, kcpcache.ClusterAndNamespaceIndexKey(s.cluster, s.namespace))
	}
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tektonv1.Pipeline)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the Pipeline from the indexer for a given workspace, namespace and name.
func (s *pipelineNamespaceLister) Get(name string) (*tektonv1.Pipeline, error) {
	key := kcpcache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tektonv1.Resource("Pipeline"), name)
	}
	return obj.(*tektonv1.Pipeline), nil
}
