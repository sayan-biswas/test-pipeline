/*
Copyright 2020 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"	
	"github.com/kcp-dev/logicalcluster/v2"
	
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"
	
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	tektonv1beta1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	tektonv1beta1listers "github.com/tektoncd/pipeline/pkg/client/listers/pipeline/v1beta1"
	)

// CustomRunClusterLister can list CustomRuns across all workspaces, or scope down to a CustomRunLister for one workspace.
type CustomRunClusterLister interface {
	List(selector labels.Selector) (ret []*tektonv1beta1.CustomRun, err error)
Cluster(cluster logicalcluster.Name)tektonv1beta1listers.CustomRunLister
}

type customRunClusterLister struct {
	indexer cache.Indexer
}

// NewCustomRunClusterLister returns a new CustomRunClusterLister.
func NewCustomRunClusterLister(indexer cache.Indexer) *customRunClusterLister {
	return &customRunClusterLister{indexer: indexer}
}

// List lists all CustomRuns in the indexer across all workspaces.
func (s *customRunClusterLister) List(selector labels.Selector) (ret []*tektonv1beta1.CustomRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tektonv1beta1.CustomRun))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get CustomRuns.
func (s *customRunClusterLister) Cluster(cluster logicalcluster.Name)tektonv1beta1listers.CustomRunLister {
return &customRunLister{indexer: s.indexer, cluster: cluster}
}

// customRunLister implements the tektonv1beta1listers.CustomRunLister interface.
type customRunLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all CustomRuns in the indexer for a workspace.
func (s *customRunLister) List(selector labels.Selector) (ret []*tektonv1beta1.CustomRun, err error) {
	selectAll := selector == nil || selector.Empty()

	list, err := s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tektonv1beta1.CustomRun)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// CustomRuns returns an object that can list and get CustomRuns in one namespace.
func (s *customRunLister) CustomRuns(namespace string) tektonv1beta1listers.CustomRunNamespaceLister {
return &customRunNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// customRunNamespaceLister implements the tektonv1beta1listers.CustomRunNamespaceLister interface.
type customRunNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all CustomRuns in the indexer for a given workspace and namespace.
func (s *customRunNamespaceLister) List(selector labels.Selector) (ret []*tektonv1beta1.CustomRun, err error) {
	selectAll := selector == nil || selector.Empty()

	var list []interface{}
	if s.namespace == metav1.NamespaceAll {
		list, err = s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	} else {
		list, err = s.indexer.ByIndex(kcpcache.ClusterAndNamespaceIndexName, kcpcache.ClusterAndNamespaceIndexKey(s.cluster, s.namespace))
	}
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tektonv1beta1.CustomRun)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the CustomRun from the indexer for a given workspace, namespace and name.
func (s *customRunNamespaceLister) Get(name string) (*tektonv1beta1.CustomRun, error) {
	key := kcpcache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tektonv1beta1.Resource("CustomRun"), name)
	}
	return obj.(*tektonv1beta1.CustomRun), nil
}
