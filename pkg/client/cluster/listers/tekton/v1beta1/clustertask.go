/*
Copyright 2020 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"	
	"github.com/kcp-dev/logicalcluster/v2"
	
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"
	tektonv1beta1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	tektonv1beta1listers "github.com/tektoncd/pipeline/pkg/client/listers/pipeline/v1beta1"
	)

// ClusterTaskClusterLister can list ClusterTasks across all workspaces, or scope down to a ClusterTaskLister for one workspace.
type ClusterTaskClusterLister interface {
	List(selector labels.Selector) (ret []*tektonv1beta1.ClusterTask, err error)
Cluster(cluster logicalcluster.Name)tektonv1beta1listers.ClusterTaskLister
}

type clusterTaskClusterLister struct {
	indexer cache.Indexer
}

// NewClusterTaskClusterLister returns a new ClusterTaskClusterLister.
func NewClusterTaskClusterLister(indexer cache.Indexer) *clusterTaskClusterLister {
	return &clusterTaskClusterLister{indexer: indexer}
}

// List lists all ClusterTasks in the indexer across all workspaces.
func (s *clusterTaskClusterLister) List(selector labels.Selector) (ret []*tektonv1beta1.ClusterTask, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tektonv1beta1.ClusterTask))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterTasks.
func (s *clusterTaskClusterLister) Cluster(cluster logicalcluster.Name)tektonv1beta1listers.ClusterTaskLister {
return &clusterTaskLister{indexer: s.indexer, cluster: cluster}
}

// clusterTaskLister implements the tektonv1beta1listers.ClusterTaskLister interface.
type clusterTaskLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all ClusterTasks in the indexer for a workspace.
func (s *clusterTaskLister) List(selector labels.Selector) (ret []*tektonv1beta1.ClusterTask, err error) {
	selectAll := selector == nil || selector.Empty()

	list, err := s.indexer.ByIndex(kcpcache.ClusterIndexName, kcpcache.ClusterIndexKey(s.cluster))
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tektonv1beta1.ClusterTask)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the ClusterTask from the indexer for a given workspace and name.
func (s *clusterTaskLister) Get(name string) (*tektonv1beta1.ClusterTask, error) {
	key := kcpcache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tektonv1beta1.Resource("ClusterTask"), name)
	}
	return obj.(*tektonv1beta1.ClusterTask), nil
}
